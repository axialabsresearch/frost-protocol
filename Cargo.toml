# frost-protocol/Cargo.toml
[package]
name = "frost-protocol"
version = "0.1.0"
edition = "2021"
description = "FROST (Finality Reliant Optimized State Transition) Protocol implementation"
license = "Apache-2.0"
authors = ["Axia Labs <info@aixalabs.technology"]
repository = "https://github.com/axialabsresearch/frost-protocol"
documentation = "https://docs.rs/frost-protocol"
readme = "README.md"
keywords = ["blockchain", "interoperability", "consensus", "protocol", "network"]
categories = ["blockchain", "network-programming", "cryptography", "asynchronous"]
exclude = [
    ".github/*",
    ".keys/*",
    "tests/*",
    "examples/*",
    "docs/*"
]

[dependencies]
# Core dependencies with no_std support
serde = { version = "1.0", default-features = false, features = ["derive"] }
parity-scale-codec = { version = "3.6.5", default-features = false, features = ["derive"] }
scale-info = { version = "2.10.0", default-features = false, features = ["derive"] }

# Optional std dependencies
thiserror = { version = "1.0", optional = true }
serde_json = { version = "1.0", optional = true }
tokio = { version = "1.0", features = ["full"], optional = true }
async-trait = { version = "0.1", optional = true }
tracing = { version = "0.1", optional = true }
uuid = { version = "1.0", features = ["v4", "serde"], optional = true }
hex = { version = "0.4", features = ["serde"], optional = true }
metrics = { version = "0.20", optional = true }
metrics-exporter-prometheus = { version = "0.11", optional = true }
tracing-subscriber = { version = "0.3", features = ["env-filter"], optional = true }
parking_lot = { version = "0.12.4", optional = true }
libp2p = { version = "0.55.0", optional = true, features = [
    "kad",
    "noise",
    "yamux",
    "tcp",
    "ping",
    "identify",
    "gossipsub",
    "tokio",
    "dns",
    "websocket",
    "macros",
    "request-response",
    "metrics",
    "autonat",
    "dcutr",
    "relay",
    "mdns",
    "pnet",
    "rsa",
    "secp256k1",
    "ed25519"
]}
opentelemetry = { version = "0.30", features = ["trace"], optional = true }
opentelemetry_sdk = { version = "0.30", features = ["trace", "rt-tokio"], optional = true }
rand = { version = "0.9.1", optional = true }
futures = { version = "0.3.31", optional = true }
tracing-opentelemetry = { version = "0.31.0", optional = true }
libp2p-kad = { version = "0.47.0", optional = true }
void = { version = "1.0.2", optional = true }
lru = { version = "0.14.0", optional = true }
reqwest = { version = "0.12.20", optional = true }
bs58 = { version = "0.5.1", optional = true }
dashmap = { version = "6.1.0", optional = true }
anyhow = { version = "1.0.98", optional = true }
semver = { version = "1.0.26", optional = true }
error = { version = "0.1.9", optional = true }
once_cell = { version = "1.0", optional = true }
petgraph = { version = "0.8.2", optional = true }

[features]
default = ["std"]
std = [
    "serde/std",
    "parity-scale-codec/std",
    "scale-info/std",
    "thiserror",
    "serde_json",
    "tokio",
    "async-trait",
    "tracing",
    "uuid",
    "hex",
    "metrics",
    "metrics-exporter-prometheus",
    "tracing-subscriber",
    "parking_lot",
    "libp2p",
    "opentelemetry",
    "opentelemetry_sdk",
    "rand",
    "futures",
    "tracing-opentelemetry",
    "libp2p-kad",
    "void",
    "lru",
    "reqwest",
    "bs58",
    "dashmap",
    "anyhow",
    "semver",
    "error",
    "once_cell",
    "petgraph"
]

[dev-dependencies]
tokio-test = "0.4"
pretty_assertions = "1.0"
test-log = { version = "0.2", features = ["trace"] }
tracing-subscriber = { version = "0.3", features = ["env-filter"] }
proptest = "1.0"
mockall = "0.11"

[[test]]
name = "unit"
path = "tests/unit/mod.rs"

[[test]]
name = "integration"
path = "tests/integration/mod.rs"

[[test]]
name = "unit_extensions"
path = "tests/unit/extensions/mod.rs"

[[test]]
name = "unit_network"
path = "tests/unit/network/mod.rs"

[[test]]
name = "unit_state"
path = "tests/unit/state/mod.rs"

[[test]]
name = "unit_routing"
path = "tests/unit/routing/mod.rs"

[[test]]
name = "unit_finality"
path = "tests/unit/finality/mod.rs"

[[test]]
name = "unit_message"
path = "tests/unit/message/mod.rs"